#!/usr/bin/env python3
# scripts/post: This script is a shorthand for running the 
#               generating new blog posts.

import argparse
import os
import re
import yaml
from glob import glob
from datetime import datetime

root = os.path.abspath('.')
# Exception for debugging from terminal
if '__file__' in globals():
    root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

posts_path = os.path.join(root, "_posts")
posts = glob(os.path.join(posts_path, "*.md"))
posts.sort(key=lambda p: p, reverse=False)
# posts.sort(key=os.path.getmtime, reverse=True)

def parse_front_matter(post):
    front_matters = []
    contents = []
    with open(post, 'r') as f:
        lines = [l.strip() for l in f.readlines()]
        
        started, ended = False, False
        for line in lines:
            if ended:
                contents.append(line)
                
            elif line == "---":
                if not started:
                    started = True
                else:
                    ended = True
            else:
                front_matters.append(line)
    
    front_matters = "\n".join(front_matters)
    front_matter = yaml.safe_load(front_matters)
    return front_matter, contents

def parse_post(post):
    filename = os.path.relpath(post, posts_path)
    filename_segs = filename.split('-')
    create_date = '-'.join(filename_segs[:3])
    slug = '-'.join(filename_segs[3:]).replace('.md', '')
    
    front_matter, contents = parse_front_matter(post)
    data = {'filename': filename, **front_matter}
    data['date'] = front_matter['date'] if 'date' in front_matter else create_date
    data['tags'] = front_matter['tags'] if 'tags' in front_matter else []
    data['categories'] = front_matter['categories'] if 'categories' in front_matter else []
    data['slug'] = slug
    data['contents'] = contents
    return data

parser = argparse.ArgumentParser(description='Handle blog posts')
parser.add_argument('action', choices=['list', 'add'])
parser.add_argument('--title', help='Title of the post', default=None)
parser.add_argument('--excerpt', help='Excerpt of the post', default=None)
parser.add_argument('--date', help='Date of the post', default=datetime.now().strftime("%Y-%m-%d"))
parser.add_argument('--tags', help='Tags of the post', default=None)
parser.add_argument('--categories', help='Categories of the post', default=None)
parser.add_argument('--slug', help='Slug of the post', default=None)
args = parser.parse_args()

all_posts = [parse_post(post) for post in posts]

if args.action == 'list':
    for p in range(len(all_posts)):
        post = all_posts[p]
        print(f"Post #{p + 1}")
        print(f"   Title: {post['title']}")
        print(f"   Date: {post['date']}")
        print(f"   Tags: {post['tags']}")
        print(f"   Categories: {post['categories']}")
        print(f"   Slug: {post['slug']}")
        print()

elif args.action == 'add':
    if args.title is None:
        raise Exception("Title is required")
        
    if args.excerpt is None:
        raise Exception("Excerpt is required")
        
    if args.slug is None:
        args.slug = re.sub(r'[^a-zA-Z0-9]+', '-', args.title.lower())
        
    if args.tags is None:
        args.tags = []
    else:
        args.tags = [a.strip() for a in args.tags.split(',') if a != '']
        
    if args.categories is None:
        args.categories = []
    else:
        args.categories = [a.strip() for a in args.categories.split(',') if a != '']
        
    filename = f"{args.date}-{args.slug}.md"
    filepath = os.path.join(posts_path, filename)
    if os.path.exists(filepath):
        raise Exception(f"File already exists: {filepath}")
        
    with open(filepath, 'w') as f:
        f.write("---\n")
        f.write(f"title: {args.title}\n")
        f.write(f"excerpt: {args.excerpt}\n")
        
        f.write(f"tags: \n")
        if len(args.tags) > 0:
            for tag in args.tags:
                f.write(f"   - {tag}\n")
            
        f.write(f"categories: \n")
        if len(args.categories) > 0:
            for category in args.categories:
                f.write(f"   - {category}\n")
            
        f.write("---\n")
        f.write("\n")
        f.write("# Introduction\n")
        f.write("\n"*3)
        f.write("# Content\n")
        f.write("\n"*3)
        f.write("# Conclusion\n")
        f.write("\n"*3)
        f.write("Hack the Planet!\n")
        
    print(f"New post created: {filepath}")
